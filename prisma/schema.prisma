// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Zoo {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  city        String
  country     String
  established DateTime    @db.Date //When the Zoo was established - the db.date means that it only keeps track of the Date and the time is defaulted to 00:00:00
  enclosures  Enclosure[]
  visitors    Visitor[]
  workers     Worker[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Animal {
  id          Int       @id @default(autoincrement())
  name        String
  species     String
  sex         Sex
  birthDate   DateTime
  deathDate   DateTime? //Optional date for animals that have died
  enclosureId Int
  enclosure   Enclosure @relation(fields: [enclosureId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Enclosure {
  id              Int         @id @default(autoincrement())
  zooId           Int
  name            String      @unique //The Name of the enlosure and must be unique
  type            String //The Type of enclosure eg Aviary
  visitorCapacity Int? //Only needed in enclosures where visitors can physically enter
  temporary       Boolean //Whether the enclosure is temporary and only available for a limited time
  animals         Animal[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  zoo             Zoo         @relation(fields: [zooId], references: [id], onDelete: Cascade)
  TourGroup       TourGroup[]
}

model Visitor {
  id         Int         @id @default(autoincrement())
  zooId      Int
  firstName  String
  lastName   String
  ticketType TicketType //The type of ticket eg Adult or Child
  ticketCost Decimal
  visitDate  DateTime
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  zoo        Zoo         @relation(fields: [zooId], references: [id], onDelete: Cascade)
  tourGroup  TourGroup[]
}

model Worker {
  id              Int         @id @default(autoincrement())
  zooId           Int
  firstName       String
  lastName        String
  hireDate        DateTime
  terminationDate DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  zoo             Zoo         @relation(fields: [zooId], references: [id], onDelete: Cascade)
  TourGroup       TourGroup[]
}

model TourGroup {
  id            Int       @id @default(autoincrement())
  workerId      Int
  enclosureId   Int
  visitors      Visitor[]
  startTime     DateTime //The Time That the tour is going to start
  description   String //A description for the focus of the tour
  guide         Worker    @relation(fields: [workerId], references: [id], onDelete: Cascade) //The Guide references the workerId field 
  startLocation Enclosure @relation(fields: [enclosureId], references: [id], onDelete: Cascade) //the starting location of the tour will be an enclosure
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Sex {
  MALE
  FEMALE
}

enum TicketType {
  ADULT
  CHILD
  SENIOR
}
