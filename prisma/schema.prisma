// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Zoo {
  id          Int         @id @default(autoincrement())
  name        String
  city        String
  country     String
  established DateTime    @db.Date
  enclosures  Enclosure[]
  visitors    Visitor[]
  Worker      Worker[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Animal {
  id          Int       @id @default(autoincrement())
  name        String
  species     String
  sex         Sex
  birthDate   DateTime
  deathDate   DateTime
  enclosureId Int
  enclosure   Enclosure @relation(fields: [enclosureId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Enclosure {
  id              Int      @id @default(autoincrement())
  zooId           Int
  name            String
  type            String
  visitorCapacity Int
  animalCapacity  Int
  animals         Animal[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  zoo             Zoo      @relation(fields: [zooId], references: [id], onDelete: Cascade)
}

model Visitor {
  id         Int      @id @default(autoincrement())
  zooId      Int
  firstName  String
  lastName   String
  ticketType String
  ticketCost Decimal
  visitDate  DateTime @db.Date
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  zoo        Zoo      @relation(fields: [zooId], references: [id], onDelete: Cascade)
}

model Worker {
  id              Int       @id @default(autoincrement())
  zooId           Int
  firstName       String
  lastName        String
  hireDate        DateTime
  terminationDate DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  zoo             Zoo       @relation(fields: [zooId], references: [id], onDelete: Cascade)
}

enum Sex {
  MALE
  FEMALE
}
