// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Zoo {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  city        String
  country     String
  established DateTime    @db.Date
  enclosures  Enclosure[]
  visitors    Visitor[]
  workers     Worker[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Animal {
  id          Int       @id @default(autoincrement())
  name        String
  species     String
  sex         Sex
  birthDate   DateTime
  deathDate   DateTime?
  enclosureId Int
  enclosure   Enclosure @relation(fields: [enclosureId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Enclosure {
  id              Int         @id @default(autoincrement())
  zooId           Int
  name            String      @unique
  type            String
  visitorCapacity Int? //Only needed in enclosures where visitors can physically enter
  temporary       Boolean
  animals         Animal[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  zoo             Zoo         @relation(fields: [zooId], references: [id], onDelete: Cascade)
  TourGroup       TourGroup[]
}

model Visitor {
  id         Int         @id @default(autoincrement())
  zooId      Int
  firstName  String
  lastName   String
  ticketType String
  ticketCost Decimal
  visitDate  DateTime
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  zoo        Zoo         @relation(fields: [zooId], references: [id], onDelete: Cascade)
  tourGroup  TourGroup[]
}

model Worker {
  id    Int @id @default(autoincrement())
  zooId Int

  firstName       String
  lastName        String
  hireDate        DateTime
  terminationDate DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  zoo             Zoo         @relation(fields: [zooId], references: [id], onDelete: Cascade)
  TourGroup       TourGroup[]
}

model TourGroup {
  id            Int       @id @default(autoincrement())
  zooId         Int
  workerId      Int
  enclosureId   Int
  visitors      Visitor[]
  startTime     DateTime
  guide         Worker    @relation(fields: [workerId], references: [id])
  startLocation Enclosure @relation(fields: [enclosureId], references: [id])
}

enum Sex {
  MALE
  FEMALE
}
