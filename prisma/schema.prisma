// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Zoo {
  id          Int      @id @default(autoincrement())
  name        String
  city        String
  country     String
  established DateTime
  entryFee    Decimal

  enclosures Enclosure[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Animal {
  id          Int       @id @default(autoincrement())
  name        String
  species     String
  sex         Sex
  birthDate   DateTime
  deathDate   DateTime
  enclosureId Int
  enclosure   Enclosure @relation(fields: [enclosureId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Enclosure {
  id              Int      @id @default(autoincrement())
  zooId           Int
  name            String
  type            String
  visitorCapacity Int
  animalCapacity  Int
  established     DateTime
  animals         Animal[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  zoo             Zoo      @relation(fields: [zooId], references: [id], onDelete: Cascade)
}

model Institution {
  id          Int          @id @default(autoincrement())
  name        String
  region      String
  country     String
  departments Department[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Department {
  id            Int         @id @default(autoincrement())
  name          String
  institutionId Int
  courses       Course[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
}

model Course {
  id           Int        @id @default(autoincrement())
  code         Int        @unique
  name         String     @unique
  description  String
  departmentId Int
  userId       Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
}

model User {
  id           Int      @id @default(autoincrement())
  role         Role     @default(LEARNER)
  firstName    String
  lastName     String
  emailAddress String   @unique
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role {
  LEARNER
  LECTURER
}

enum Sex {
  MALE
  FEMALE
}
